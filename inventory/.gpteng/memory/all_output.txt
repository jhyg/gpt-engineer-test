Let's start by creating the `pom.xml` file which will define the Maven project, its dependencies, and properties.

pom.xml
```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>inventory-service</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.3</version>
    </parent>

    <properties>
        <java.version>17</java.version>
        <spring-cloud.version>2021.0.3</spring-cloud.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web, includes REST Controllers support -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter Data JPA, includes spring-data-rest -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- H2 Database Engine -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok for boilerplate code reduction -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Spring Cloud Stream -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
            <version>3.1.3</version>
        </dependency>

        <!-- Spring Cloud Stream Binder for Kafka -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream-binder-kafka</artifactId>
        </dependency>

        <!-- Spring Boot Starter Test for testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- JUnit Jupiter for testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
```

Next, we will create the main application file.

src/main/java/com/example/inventoryservice/InventoryServiceApplication.java
```java
package com.example.inventoryservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class InventoryServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(InventoryServiceApplication.class, args);
    }
}
```

Now, let's define the Inventory aggregate root as an entity.

src/main/java/com/example/inventoryservice/domain/Inventory.java
```java
package com.example.inventoryservice.domain;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
public class Inventory {
    @Id
    private String productId;
    private Integer stockRemain;
}
```

Next, we will create the InventoryUpdated event.

src/main/java/com/example/inventoryservice/events/InventoryUpdated.java
```java
package com.example.inventoryservice.events;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class InventoryUpdated {
    private String productId;
    private Long stockRemain;
}
```

We will also need a repository to handle the Inventory entity.

src/main/java/com/example/inventoryservice/repository/InventoryRepository.java
```java
package com.example.inventoryservice.repository;

import com.example.inventoryservice.domain.Inventory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.rest.core.annotation.RepositoryRestResource;

@RepositoryRestResource
public interface InventoryRepository extends JpaRepository<Inventory, String> {
}
```

Now, let's create a Kafka configuration class.

src/main/java/com/example/inventoryservice/config/KafkaConfig.java
```java
package com.example.inventoryservice.config;

import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableBinding(Source.class)
public class KafkaConfig {
}
```

Next, we need a service to handle the business logic.

src/main/java/com/example/inventoryservice/service/InventoryService.java
```java
package com.example.inventoryservice.service;

import com.example.inventoryservice.domain.Inventory;
import com.example.inventoryservice.events.InventoryUpdated;
import com.example.inventoryservice.repository.InventoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class InventoryService {

    private final InventoryRepository inventoryRepository;
    private final Source source;

    @Autowired
    public InventoryService(InventoryRepository inventoryRepository, Source source) {
        this.inventoryRepository = inventoryRepository;
        this.source = source;
    }

    @Transactional
    public void updateInventory(String productId, Integer stockRemain) {
        Inventory inventory = inventoryRepository.findById(productId)
                .orElseThrow(() -> new RuntimeException("Product not found"));
        inventory.setStockRemain(stockRemain);
        inventoryRepository.save(inventory);

        InventoryUpdated event = new InventoryUpdated(productId, stockRemain.longValue());
        source.output().send(MessageBuilder.withPayload(event).build());
    }
}
```

We will also need a REST controller to expose the Inventory operations.

src/main/java/com/example/inventoryservice/controller/InventoryController.java
```java
package com.example.inventoryservice.controller;

import com.example.inventoryservice.service.InventoryService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/inventory")
public class InventoryController {

    private final InventoryService inventoryService;

    @Autowired
    public InventoryController(InventoryService inventoryService) {
        this.inventoryService = inventoryService;
    }

    @PatchMapping("/{productId}")
    public ResponseEntity<?> updateInventory(@PathVariable String productId, @RequestParam Integer stockRemain) {
        inventoryService.updateInventory(productId, stockRemain);
        return ResponseEntity.ok().build();
    }
}
```

Finally, let's create a JUnit test for the InventoryService.

src/test/java/com/example/inventoryservice/service/InventoryServiceTest.java
```java
package com.example.inventoryservice.service;

import com.example.inventoryservice.domain.Inventory;
import com.example.inventoryservice.repository.InventoryRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.messaging.MessageChannel;

import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class InventoryServiceTest {

    @Mock
    private InventoryRepository inventoryRepository;

    @Mock
    private Source source;

    @Mock
    private MessageChannel messageChannel;

    @InjectMocks
    private InventoryService inventoryService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(source.output()).thenReturn(messageChannel);
    }

    @Test
    void updateInventoryTest() {
        Inventory inventory = new Inventory();
        inventory.setProductId("testProduct");
        inventory.setStockRemain(10);

        when(inventoryRepository.findById(any())).thenReturn(Optional.of(inventory));
        when(inventoryRepository.save(any(Inventory.class))).thenReturn(inventory);
        when(messageChannel.send(any())).thenReturn(true);

        inventoryService.updateInventory("testProduct", 5);

        verify(inventoryRepository, times(1)).save(any(Inventory.class));
        verify(messageChannel, times(1)).send(any());
    }
}
```

Lastly, we need to create the execution shell script.

run.sh
```sh
#!/bin/bash
mvn spring-boot:run --no-transfer-progress
```

Make sure to give execution permission to the `run.sh` script:

```sh
chmod +x run.sh
```

This concludes a fully working implementation.